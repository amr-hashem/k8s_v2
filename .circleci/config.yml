# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockearhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build service1
          command: |
            cd service1
            mvn -B -DskipTests clean package
      - run:
          name: Build service2
          command: |
            cd service1
            mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test service1
          command: |
            cd service1
            mvn test
      - run:
          name: Test service2
          command: |
            cd service1
            mvn test
  docker-build-push:
    docker:
      # - image: circleci/python:3.7.3
    machine: true
    steps:
      - checkout
      - run:
          name: build docker image
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
            cd service1
            docker build -f Dockerfile  -t amrhashem/service1:k8s.v1.3 .
            docker push amrhashem/service1:k8s.v1.3
            cd ../service2
            docker build -f Dockerfile  -t amrhashem/service2:k8s.v1.3 .
            docker push amrhashem/service2:k8s.v1.3

  k8sdeploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip curl wget
      - run:
          name: Install EKSCTL and kubectl
          command: |
            # curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            # mv /tmp/eksctl /usr/local/bin
            # echo "eksctl version"
            # eksctl version
            wget -q https://storage.googleapis.com/kubernetes-release/release/$(wget -q -O - https://storage.googleapis.com/kubernetes-release/release/stable.txt -O -)/bin/linux/amd64/kubectl -O kubectl
            chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
            chmod +x /usr/local/bin/kubectl
      - run:
          name: create and connect to cluster
          command: |
            aws configure set aws_access_key_id ${aws_access_key_id}
            aws configure set aws_secret_access_key ${aws_secret_access_key}
            # eksctl create cluster -f ./k8s/eks-config.yml
            # eksctl create cluster --name main-cluster --version 1.20 --region us-west-1 --nodegroup-name linux-nodes --node-type t2.micro --nodes 2
            aws eks --region {aws_region} update-kubeconfig --name {aws_cluster_name}
      - run:
          name: Deploy services to cluster
          command: |
            kubectl apply -f ./service1/service1.yml
            kubectl apply -f ./service2/service2.yml
      - run:
          name: Check on the status of the ReplicationController
          command: |
            kubectl describe replicationcontrollers
            kubectl describe services bluegreenlb
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - docker-build-push:
          requires: [build-and-test]
      - k8sdeploy:
          requires: [docker-build-push]
